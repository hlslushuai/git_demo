CREATE TABLE production_task (
    vrowno VARCHAR(10),              -- 序号
    cbwrastunitid VARCHAR(10),        -- 实际计量单位
    cbwrunitid VARCHAR(10),           -- 计量单位
    nbwrastnum NUMERIC(10, 2),        -- 实际数量
    nbwrnum NUMERIC(10, 2),           -- 计划数量
    cbdeptvid VARCHAR(10),            -- 部门编码
    cbwkid VARCHAR(50),               -- 工作中心编码
    cbteamid VARCHAR(10),             -- 班组编码
    cactivityid VARCHAR(10),          -- 活动编码
    dtaskdate TIMESTAMP,              -- 任务日期时间
    nstandnum NUMERIC(10, 2),         -- 标准数量
    nactnum NUMERIC(10, 2)            -- 实际数量
);
type ProductionTask struct {
    VrowNo       string    `json:"vrowno"`        // 序号
    CbwrAstUnitId string    `json:"cbwrastunitid"` // 实际计量单位
    CbwrUnitId   string    `json:"cbwrunitid"`    // 计量单位
    NbwrAstNum   float64   `json:"nbwrastnum"`    // 实际数量
    NbwrNum      float64   `json:"nbwrnum"`       // 计划数量
    CbDeptVid    string    `json:"cbdeptvid"`     // 部门编码
    CbWkId       string    `json:"cbwkid"`        // 工作中心编码
    CbTeamId     string    `json:"cbteamid"`      // 班组编码
    CActivityId  string    `json:"cactivityid"`   // 活动编码
    DTaskDate    time.Time `json:"dtaskdate"`     // 任务日期时间
    NStandNum    float64   `json:"nstandnum"`     // 标准数量
    NActNum      float64   `json:"nactnum"`       // 实际数量
}
var DB *gorm.DB

// 初始化数据库连接
func initDB() {
	var err error
	// 使用 PostgreSQL 数据库
	DB, err = gorm.Open("postgres", "host=localhost user=youruser dbname=yourdb password=yourpassword sslmode=disable")
	if err != nil {
		log.Fatalf("failed to connect to database: %v", err)
	}
	// 自动迁移
	DB.AutoMigrate(&ProductionTask{})
}

// 保存生产任务数据到数据库
func saveProductionTask(c *gin.Context) {
	var task ProductionTask
	if err := c.ShouldBindJSON(&task); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := DB.Create(&task).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save task"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Task saved successfully"})
}

func main() {
	initDB()
	defer DB.Close()

	r := gin.Default()

	// 定义 POST 接口
	r.POST("/api/tasks", saveProductionTask)

	// 启动服务器
	if err := r.Run(":8080"); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
}

type U8Department struct {
	Rank    int    `json:"rank"`
	Name    string `json:"name"`
	Code    string `json:"code"`
	EndFlag int    `json:"endflag"`
}
CREATE TABLE u8_department (
    rank INT,
    name VARCHAR(255),
    code VARCHAR(10),
    endflag INT
);
type U8Supplier struct {
	BankAccNumber int64  `json:"bank_acc_number"`
	AbbrName      string `json:"abbrname"`
	Name          string `json:"name"`
	BankOpen      string `json:"bank_open"`
	Code          string `json:"code"`
	SortCode      string `json:"sort_code"`
}
CREATE TABLE u8_supplier (
    bank_acc_number BIGINT,
    abbrname VARCHAR(255),
    name VARCHAR(255),
    bank_open VARCHAR(255),
    code VARCHAR(10),
    sort_code VARCHAR(10)
);
type U8Unit struct {
	GroupCode string `json:"group_code"`
	Name      string `json:"name"`
	MainFlag  int    `json:"main_flag"`
	Code      string `json:"code"`
}
CREATE TABLE u8_unit (
    group_code VARCHAR(10),
    name VARCHAR(255),
    main_flag INT,
    code VARCHAR(10)
);
type U8CustomerData struct {
	AbbrName     string `json:"abbrname"`
	Name         string `json:"name"`
	DomainCode   string `json:"domain_code"`
	Code         string `json:"code"`
	Industry     string `json:"industry"`
	Contact      string `json:"contact"`
	SortCode     string `json:"sort_code"`
	Mobile       int64  `json:"mobile"`
}
CREATE TABLE u8_customer_data (
    abbrname VARCHAR(255),
    name VARCHAR(255),
    domain_code VARCHAR(10),
    code VARCHAR(10),
    industry VARCHAR(50),
    contact VARCHAR(50),
    sort_code VARCHAR(10),
    mobile BIGINT
);
type U8Person struct {
	PersonGradeNo string `json:"persongradeno"`
	DepartmentNo  string `json:"departmentno"`
	Month         int    `json:"month"`
	SalaryGradeNo string `json:"salarygradeno"`
	Year          int    `json:"year"`
	PersonName    string `json:"personname"`
	PersonNo      string `json:"personno"`
}
CREATE TABLE u8_person (
    persongradeno VARCHAR(50),
    departmentno VARCHAR(10),
    month INT,
    salarygradeno VARCHAR(10),
    year INT,
    personname VARCHAR(255),
    personno VARCHAR(50)
);
type U8ProductionOrder struct {
	Code           string `json:"code"`
	Name           string `json:"name"`
	PkOrg          string `json:"pk_org"`
	OperatorType   string `json:"operatorType"`
}
CREATE TABLE u8_production_order (
    code VARCHAR(50),
    name VARCHAR(255),
    pk_org VARCHAR(50),
    operator_type VARCHAR(50)
);
type U8Material struct {
	RecursiveFlag   string `json:"recursiveflag"`
	WhCode          string `json:"whcode"`
	CinvCode        string `json:"cinvcode"`
	CinvName        string `json:"cinvname"`
	OptionalFlag    string `json:"optionalflag"`
	CwhName         string `json:"cwhname"`
	OpComponentId   string `json:"opcomponentid"`
	ProductType     string `json:"producttype"`
	DrawDeptCode    string `json:"drawdeptcode"`
	CdepName        string `json:"cdepname"`
	BomId           string `json:"bomid"`
}
CREATE TABLE u8_material (
    recursiveflag VARCHAR(10),
    whcode VARCHAR(10),
    cinvcode VARCHAR(50),
    cinvname VARCHAR(255),
    optionalflag VARCHAR(10),
    cwhname VARCHAR(255),
    opcomponentid VARCHAR(50),
    producttype VARCHAR(10),
    drawdeptcode VARCHAR(10),
    cdepname VARCHAR(255),
    bomid VARCHAR(50)
);
type U8MaterialBOM struct {
	CinvName        string `json:"cinvname"`
	CreateUser      string `json:"createuser"`
	Parentscrap     string `json:"parentscrap"`
	VersionDesc     string `json:"versiondesc"`
	BomType         string `json:"bomtype"`
	VersionEffDate  Time.time `json:"versioneffdate"`
	CinvCName       string `json:"cinvcname"`
	BomId           string `json:"bomid"`
	CinvCCode       string `json:"cinvccode"`
}
CREATE TABLE u8_material_bom (
    cinvname VARCHAR(255),
    createuser VARCHAR(50),
    parentscrap VARCHAR(10),
    versiondesc VARCHAR(10),
    bomtype VARCHAR(10),
    versioneffdate TIMESTAMP,
    cinvcname VARCHAR(255),
    bomid VARCHAR(50),
    cinvccode VARCHAR(10)
);



CREATE TABLE kingdee_department (
    fuseorgid VARCHAR(50),
    fcreateorgid VARCHAR(50),
    fname VARCHAR(100)
);

type KingdeeDepartment struct {
    FUseOrgId   string `json:"fuseorgid"`
    FCreateOrgId string `json:"fcreateorgid"`
    FName       string `json:"fname"`
}

{
    "FUseOrgId": "ORG001",
    "FCreateOrgId": "ORG_ADMIN",
    "FName": "kingdee_department"
}

CREATE TABLE kingdee_work_center (
    fuseorgid VARCHAR(50),
    feffectdate TIMESTAMP,
    fname VARCHAR(100),
    fcreateorgid VARCHAR(50),
    foptctrlcodeid VARCHAR(50),
    fdeptid VARCHAR(50),
    fexpiredate TIMESTAMP
);
type KingdeeWorkCenter struct {
    FUseOrgId    string    `json:"fuseorgid"`
    FEffectDate   time.Time `json:"feffectdate"`
    FName        string    `json:"fname"`
    FCreateOrgId string    `json:"fcreateorgid"`
    FOptCtrlCodeID string  `json:"foptctrlcodeid"`
    FDeptID      string    `json:"fdeptid"`
    FExpireDate  time.Time `json:"fexpiredate"`
}
{
    "FUseOrgId": "ORG001",
    "FEffectDate": "2023-01-01 00:00:00",
    "FName": "kingdee_work_center",
    "FCreateOrgId": "ORG_ADMIN",
    "FOptCtrlCodeID": "OPT001",
    "FDeptID": "DEPT01",
    "FExpireDate": "2024-01-01 00:00:00"
}
CREATE TABLE kingdee_supplier (
    flocaddress VARCHAR(255),
    flocname VARCHAR(100),
    flocmobile VARCHAR(20),
    flocnewcontact VARCHAR(100)
);

type KingdeeSupplier struct {
    FLocAddress     string `json:"flocaddress"`
    FLocName        string `json:"flocname"`
    FLocMobile      string `json:"flocmobile"`
    FLocNewContact  string `json:"flocnewcontact"`
}

{
    "FLocAddress": "北京市海淀区某街道",
    "FLocName": "北京辰环手机配件有限公司",
    "FLocMobile": "13800138000",
    "FLocNewContact": "张三"
}
CREATE TABLE kingdee_plan_order (
    fmaterialid VARCHAR(50),
    finstockorgid VARCHAR(50),
    fdemandorgid VARCHAR(50),
    fplanstartdate TIMESTAMP,
    fsupplyorgid VARCHAR(50)
);

type KingdeePlanOrder struct {
    FMaterialId      string    `json:"fmaterialid"`
    FInStockOrgId    string    `json:"finstockorgid"`
    FDemandOrgId     string    `json:"fdemandorgid"`
    FPlanStartDate   time.Time `json:"fplanstartdate"`
    FSupplyOrgId     string    `json:"fsupplyorgid"`
}

{
    "FMaterialId": "MATERIAL_001",
    "FInStockOrgId": "ORG001",
    "FDemandOrgId": "ORG002",
    "FPlanStartDate": "2024-10-01T00:00:00Z",
    "FSupplyOrgId": "SUPPLY_ORG"
}
CREATE TABLE kingdee_unit (
    fnumber VARCHAR(50),
    fcurrentunit VARCHAR(50),
    foldnumber VARCHAR(50),
    fdocumentstatus VARCHAR(100),
    fisbaseunit BOOLEAN,
    fisystemset BOOLEAN,
    fname VARCHAR(100),
    fprecision INT
);

type KingdeeUnit struct {
    FNumber        string `json:"fnumber"`
    FCurrentUnit   string `json:"fcurrentunit"`
    FOldNumber     string `json:"foldnumber"`
    FDocumentStatus string `json:"fdocumentstatus"`
    FIsBaseUnit    bool   `json:"fisbaseunit"`
    FIsSystemSet   bool   `json:"fisystemset"`
    FName          string `json:"fname"`
    FPrecision     int    `json:"fprecision"`
}

{
    "FNumber": "UNIT001",
    "FCurrentUnit": "个",
    "FOldNumber": "OLD_UNIT001",
    "FDocumentStatus": "有效",
    "FIsBaseUnit": true,
    "FIsSystemSet": false,
    "FName": "个",
    "FPrecision": 2
}
CREATE TABLE kingdee_customer (
    ftradingcurrid VARCHAR(50),
    fname VARCHAR(100),
    fcreateorgid VARCHAR(50)
);

type KingdeeCustomer struct {
    FTradingCurrId string `json:"ftradingcurrid"`
    FName          string `json:"fname"`
    FCreateOrgId   string `json:"fcreateorgid"`
}

{
    "FTradingCurrId": "CNY",
    "FName": "深圳辰环手机配件有限公司",
    "FCreateOrgId": "ORG_ADMIN"
}
CREATE TABLE kingdee_production_order (
    fprdorgid VARCHAR(50),
    fownertypeid VARCHAR(50),
    fbilltype VARCHAR(50),
    fdate TIMESTAMP,
    fppbomtype VARCHAR(50)
);

type KingdeeProductionOrder struct {
    FPrdOrgId      string    `json:"fprdorgid"`
    FOwnerTypeId   string    `json:"fownertypeid"`
    FBillType      string    `json:"fbilltype"`
    FDate          time.Time `json:"fdate"`
    FPPBOMType     string    `json:"fppbomtype"`
}

{
    "FPrdOrgId": "ORG001",
    "FOwnerTypeId": "TYPE001",
    "FBillType": "生产",
    "FDate": "2024-10-01 00:00:00",
    "FPPBOMType": "BOM_TYPE_001"
}
CREATE TABLE kingdee_material (
    fcreatorid VARCHAR(50),
    fextvar VARCHAR(50),
    foldnumber VARCHAR(50),
    fdescription VARCHAR(255),
    fmaterialgroup VARCHAR(50),
    fbaseproperty VARCHAR(50),
    fmaterialsrc VARCHAR(50),
    fspecification VARCHAR(100),
    fplmmaterialid VARCHAR(50),
    fnumber VARCHAR(50),
    ferpclsid VARCHAR(50)
);

type KingdeeMaterial struct {
    FCreatorId      string `json:"fcreatorid"`
    FExtVar         string `json:"fextvar"`
    FOldNumber      string `json:"foldnumber"`
    FDescription    string `json:"fdescription"`
    FMaterialGroup  string `json:"fmaterialgroup"`
    FBaseProperty   string `json:"fbaseproperty"`
    FMaterialSRC    string `json:"fmaterialsrc"`
    FSpecification  string `json:"fspecification"`
    FPLMMaterialId  string `json:"fplmmaterialid"`
    FNumber         string `json:"fnumber"`
    FEqpClsID       string `json:"ferpclsid"`
}

{
    "FCreatorId": "USER001",
    "FExtVar": "EXT_001",
    "FOldNumber": "OLD_MATERIAL_001",
    "FDescription": "电子元件",
    "FMaterialGroup": "电子",
    "FBaseProperty": "GROUP001",
    "FMaterialSRC": "采购",
    "FSpecification": "型号X",
    "FPLMMaterialId": "PLM001",
    "FNumber": "MATERIAL_001",
    "FEqpClsID": "ATTR001"
}
CREATE TABLE kingdee_bom (
    fcreateorgid VARCHAR(50),
    fmateriaid VARCHAR(50),
    fbomcategory VARCHAR(50),
    fbomuse VARCHAR(50),
    fisbaseunit BOOLEAN,
    fisystemset BOOLEAN,
    fname VARCHAR(100),
    fprecision INT,
    funitid VARCHAR(50),
    fmateriaidchild VARCHAR(50),
    fissuetype VARCHAR(50),
    fownertypeid VARCHAR(50),
    fdosagetype VARCHAR(50),
    funitidlot VARCHAR(50),
    fmateriaidlotbased VARCHAR(50),
    fcobytype VARCHAR(50),
    fmateriaidcoby VARCHAR(50)
);

type KingdeeBOM struct {
    FCreateOrgId     string `json:"fcreateorgid"`
    FMATERIALID      string `json:"fmateriaid"`
    FBOMCATEGORY      string `json:"fbomcategory"`
    FBOMUSE          string `json:"fbomuse"`
    FIsBaseUnit      bool   `json:"fisbaseunit"`
    FIsSystemSet     bool   `json:"fisystemset"`
    FName            string `json:"fname"`
    FPrecision       int    `json:"fprecision"`
    FUNITID          string `json:"funitid"`
    FMATERIALIDCHILD string `json:"fmateriaidchild"`
    FISSUETYPE       string `json:"fissuetype"`
    FOWNERTYPEID     string `json:"fownertypeid"`
    FDOSAGETYPE      string `json:"fdosagetype"`
    FUNITIDLOT       string `json:"funitidlot"`
    FMATERIALIDLOTBASED string `json:"fmateriaidlotbased"`
    FCOBYTYPE        string `json:"fcobytype"`
    FMATERIALIDCOBY  string `json:"fmateriaidcoby"`
}

{
    "FCreateOrgId": "ORG_ADMIN",
    "FMATERIALID": "MATERIAL_001",
    "FBOMCATEGORY": "类型A",
    "FBOMUSE": "生产",
    "FIsBaseUnit": true,
    "FIsSystemSet": false,
    "FName": "kingdee_bom",
    "FPrecision": 2,
    "FUNITID": "UNIT001",
    "FMATERIALIDCHILD": "MATERIAL_CHILD_001",
    "FISSUETYPE": "发料",
    "FOWNERTYPEID": "OWNER001",
    "FDOSAGETYPE": "用量",
    "FUNITIDLOT": "LOT001",
    "FMATERIALIDLOTBASED": "MATERIAL_LOT_001",
    "FCOBYTYPE": "副产品",
    "FMATERIALIDCOBY": "MATERIAL_COBY_001"
}
CREATE TABLE kingdee_employee (
    fstaffnumber VARCHAR(50),
    fcreateorgid VARCHAR(50),
    fjoindate TIMESTAMP,
    fuseorgid VARCHAR(50),
    fname VARCHAR(100)
);

type KingdeeEmployee struct {
    FStaffNumber string json:"fstaffnumber" 
    FCreateOrgId string json:"fcreateorgid" 
    FJoinDate time.Time json:"fjoindate" 
    FUseOrgId string json:"fuseorgid" 
    FName string json:"fname" 
}

{ 
"FStaffNumber": "EMP001", 
"FCreateOrgId": "ORG_ADMIN", 
"FJoinDate": "2023-06-15 00:00:00", 
"FUseOrgId": "ORG001", 
"FName": "李四" 
}
