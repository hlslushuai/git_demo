CREATE TABLE production_task (
    vrowno VARCHAR(10),              -- 序号
    cbwrastunitid VARCHAR(10),        -- 实际计量单位
    cbwrunitid VARCHAR(10),           -- 计量单位
    nbwrastnum NUMERIC(10, 2),        -- 实际数量
    nbwrnum NUMERIC(10, 2),           -- 计划数量
    cbdeptvid VARCHAR(10),            -- 部门编码
    cbwkid VARCHAR(50),               -- 工作中心编码
    cbteamid VARCHAR(10),             -- 班组编码
    cactivityid VARCHAR(10),          -- 活动编码
    dtaskdate TIMESTAMP,              -- 任务日期时间
    nstandnum NUMERIC(10, 2),         -- 标准数量
    nactnum NUMERIC(10, 2)            -- 实际数量
);
type ProductionTask struct {
    VrowNo       string    `json:"vrowno"`        // 序号
    CbwrAstUnitId string    `json:"cbwrastunitid"` // 实际计量单位
    CbwrUnitId   string    `json:"cbwrunitid"`    // 计量单位
    NbwrAstNum   float64   `json:"nbwrastnum"`    // 实际数量
    NbwrNum      float64   `json:"nbwrnum"`       // 计划数量
    CbDeptVid    string    `json:"cbdeptvid"`     // 部门编码
    CbWkId       string    `json:"cbwkid"`        // 工作中心编码
    CbTeamId     string    `json:"cbteamid"`      // 班组编码
    CActivityId  string    `json:"cactivityid"`   // 活动编码
    DTaskDate    time.Time `json:"dtaskdate"`     // 任务日期时间
    NStandNum    float64   `json:"nstandnum"`     // 标准数量
    NActNum      float64   `json:"nactnum"`       // 实际数量
}
var DB *gorm.DB

// 初始化数据库连接
func initDB() {
	var err error
	// 使用 PostgreSQL 数据库
	DB, err = gorm.Open("postgres", "host=localhost user=youruser dbname=yourdb password=yourpassword sslmode=disable")
	if err != nil {
		log.Fatalf("failed to connect to database: %v", err)
	}
	// 自动迁移
	DB.AutoMigrate(&ProductionTask{})
}

// 保存生产任务数据到数据库
func saveProductionTask(c *gin.Context) {
	var task ProductionTask
	if err := c.ShouldBindJSON(&task); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := DB.Create(&task).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save task"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Task saved successfully"})
}

func main() {
	initDB()
	defer DB.Close()

	r := gin.Default()

	// 定义 POST 接口
	r.POST("/api/tasks", saveProductionTask)

	// 启动服务器
	if err := r.Run(":8080"); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
}

type U8Department struct {
	Rank    int    `json:"rank"`
	Name    string `json:"name"`
	Code    string `json:"code"`
	EndFlag int    `json:"endflag"`
}
CREATE TABLE u8_department (
    rank INT,
    name VARCHAR(255),
    code VARCHAR(10),
    endflag INT
);
type U8Supplier struct {
	BankAccNumber int64  `json:"bank_acc_number"`
	AbbrName      string `json:"abbrname"`
	Name          string `json:"name"`
	BankOpen      string `json:"bank_open"`
	Code          string `json:"code"`
	SortCode      string `json:"sort_code"`
}
CREATE TABLE u8_supplier (
    bank_acc_number BIGINT,
    abbrname VARCHAR(255),
    name VARCHAR(255),
    bank_open VARCHAR(255),
    code VARCHAR(10),
    sort_code VARCHAR(10)
);
type U8Unit struct {
	GroupCode string `json:"group_code"`
	Name      string `json:"name"`
	MainFlag  int    `json:"main_flag"`
	Code      string `json:"code"`
}
CREATE TABLE u8_unit (
    group_code VARCHAR(10),
    name VARCHAR(255),
    main_flag INT,
    code VARCHAR(10)
);
type U8CustomerData struct {
	AbbrName     string `json:"abbrname"`
	Name         string `json:"name"`
	DomainCode   string `json:"domain_code"`
	Code         string `json:"code"`
	Industry     string `json:"industry"`
	Contact      string `json:"contact"`
	SortCode     string `json:"sort_code"`
	Mobile       int64  `json:"mobile"`
}
CREATE TABLE u8_customer_data (
    abbrname VARCHAR(255),
    name VARCHAR(255),
    domain_code VARCHAR(10),
    code VARCHAR(10),
    industry VARCHAR(50),
    contact VARCHAR(50),
    sort_code VARCHAR(10),
    mobile BIGINT
);
type U8Person struct {
	PersonGradeNo string `json:"persongradeno"`
	DepartmentNo  string `json:"departmentno"`
	Month         int    `json:"month"`
	SalaryGradeNo string `json:"salarygradeno"`
	Year          int    `json:"year"`
	PersonName    string `json:"personname"`
	PersonNo      string `json:"personno"`
}
CREATE TABLE u8_person (
    persongradeno VARCHAR(50),
    departmentno VARCHAR(10),
    month INT,
    salarygradeno VARCHAR(10),
    year INT,
    personname VARCHAR(255),
    personno VARCHAR(50)
);
type U8ProductionOrder struct {
	Code           string `json:"code"`
	Name           string `json:"name"`
	PkOrg          string `json:"pk_org"`
	OperatorType   string `json:"operatorType"`
}
CREATE TABLE u8_production_order (
    code VARCHAR(50),
    name VARCHAR(255),
    pk_org VARCHAR(50),
    operator_type VARCHAR(50)
);
type U8Material struct {
	RecursiveFlag   string `json:"recursiveflag"`
	WhCode          string `json:"whcode"`
	CinvCode        string `json:"cinvcode"`
	CinvName        string `json:"cinvname"`
	OptionalFlag    string `json:"optionalflag"`
	CwhName         string `json:"cwhname"`
	OpComponentId   string `json:"opcomponentid"`
	ProductType     string `json:"producttype"`
	DrawDeptCode    string `json:"drawdeptcode"`
	CdepName        string `json:"cdepname"`
	BomId           string `json:"bomid"`
}
CREATE TABLE u8_material (
    recursiveflag VARCHAR(10),
    whcode VARCHAR(10),
    cinvcode VARCHAR(50),
    cinvname VARCHAR(255),
    optionalflag VARCHAR(10),
    cwhname VARCHAR(255),
    opcomponentid VARCHAR(50),
    producttype VARCHAR(10),
    drawdeptcode VARCHAR(10),
    cdepname VARCHAR(255),
    bomid VARCHAR(50)
);
type U8MaterialBOM struct {
	CinvName        string `json:"cinvname"`
	CreateUser      string `json:"createuser"`
	Parentscrap     string `json:"parentscrap"`
	VersionDesc     string `json:"versiondesc"`
	BomType         string `json:"bomtype"`
	VersionEffDate  Time.time `json:"versioneffdate"`
	CinvCName       string `json:"cinvcname"`
	BomId           string `json:"bomid"`
	CinvCCode       string `json:"cinvccode"`
}
CREATE TABLE u8_material_bom (
    cinvname VARCHAR(255),
    createuser VARCHAR(50),
    parentscrap VARCHAR(10),
    versiondesc VARCHAR(10),
    bomtype VARCHAR(10),
    versioneffdate TIMESTAMP,
    cinvcname VARCHAR(255),
    bomid VARCHAR(50),
    cinvccode VARCHAR(10)
);



